AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template VPC_with_PublicIPs_And_DNS: Sample template
  that creates a VPC with DNS and public IPs enabled. Note that you are billed
  for the AWS resources that you use when you create a stack from this template.
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 11.0.0.0/16
      Tags:
        - Key: Name
          Value: CF_class

  PublicSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-2c
      Tags:
        - Key: Name
          Value: PublicSubnetC
      VpcId: !Ref VPC
      CidrBlock: 11.0.2.0/24

  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-2b
      Tags:
        - Key: Name
          Value: PublicSubnetB
      VpcId: !Ref VPC
      CidrBlock: 11.0.1.0/24

  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-2a
      CidrBlock: 11.0.0.0/24
      Tags:
        - Key: Name
          Value: PublicSubnetA

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !GetAtt 
        - VPC
        - DefaultNetworkAcl
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      Tags:
        - Key: Name
          Value: PublicBaseNet11
      GroupDescription: Enable HTTP ingress
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  EC2SRTA2KR8U:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  EC2SRTAVR2M:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
  SubnetList:
    Description: the subnets of the VpcId
    Value: !Join 
      - ','
      - - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
    Export:
      Name: !Sub '${AWS::StackName}-SubnetList'
  PublicNetA:
    Description: one of the public subnets A
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-SubnetA'
  PublicNetB:
    Description: one of the public subnets B
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub '${AWS::StackName}-SubnetB'
  WebServerSecurityGroup:
    Description: The security group ID to use for public web servers
    Value: !GetAtt 
      - WebServerSecurityGroup
      - GroupId
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupID'
